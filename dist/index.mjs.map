{"version":3,"sources":["../src/core/client.ts","../src/models/timetable_entry.ts","../src/models/mark.ts","../src/models/mark_class.ts"],"sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\n\r\nimport { ClientOptions, Tokens } from \"../types/client\";\r\n\r\nimport TimetableEntry from \"../models/timetable_entry\";\r\nimport MarkClass from \"../models/mark_class\";\r\n\r\nexport default class AurionClient {\r\n\r\n    private config: ClientOptions;\r\n    private tokens?: Tokens;\r\n    private client: AxiosInstance;\r\n\r\n    constructor(config: ClientOptions) {\r\n        this.config = config;\r\n        this.tokens = config.tokens;\r\n        this.client = this.getClient();\r\n    }\r\n\r\n    get loggedIn(): boolean {\r\n        return !!this.tokens?.normal;\r\n    }\r\n\r\n    getClient() {\r\n        return axios.create({\r\n            baseURL: this.config.baseUrl,\r\n            headers: { 'Authorization': this.loggedIn ? `Bearer ${this.tokens?.normal}` : '' }\r\n        });\r\n    }\r\n\r\n    async login(login: string, password: string): Promise<void> {\r\n        const response = await this.client.post('/login', { login, password });\r\n\r\n        this.tokens = response.data;\r\n        this.client = this.getClient();\r\n\r\n        return;\r\n    }\r\n\r\n    async getTimetable(startDate: Date, endDate: Date): Promise<TimetableEntry[]> {\r\n        const date_debut = startDate.toISOString().split('T')[0];\r\n        const date_fin = endDate.toISOString().split('T')[0];\r\n\r\n        const response = await this.client.get('/mon_planning', { params: { date_debut, date_fin } });\r\n        const entries = response.data.filter((entry: any) => entry.id).map((entry: any) => new TimetableEntry(entry));\r\n\r\n        return entries;\r\n    }\r\n\r\n    async getMarks(): Promise<MarkClass[]> {\r\n        const response = await this.client.get('/mes_notes');\r\n        const result = response.data.map((mark: any) => new MarkClass(mark));\r\n\r\n        return result;\r\n    }\r\n\r\n    async getAbsences(): Promise<any> {\r\n        const response = await this.client.get('/mes_absences');\r\n        const result = response.data;\r\n\r\n        return result;\r\n    }\r\n\r\n}","export default class TimetableEntry {\r\n\r\n    public id?: number;\r\n\r\n    public startDate: Date;\r\n    public endDate: Date;\r\n\r\n    public class: string;\r\n    public activityType: string;\r\n    public teachers?: string;\r\n    public room?: string;\r\n\r\n    public title: string = \"Sans titre\";\r\n    public description: string = \"Pas de description\";\r\n\r\n    private originalData: any;\r\n\r\n    constructor(data: any) {\r\n        this.originalData = data;\r\n\r\n        this.id = data.id;\r\n        this.startDate = new Date(data.date_debut);\r\n        this.endDate = new Date(data.date_fin);\r\n\r\n        this.class = data.matiere;\r\n        this.activityType = data.type_activite;\r\n        this.teachers = data.intervenants;\r\n        this.room = data.ressource;\r\n\r\n        this.title = data.favori.f3;\r\n        this.description = Object.keys(data.favori).filter(key => key !== 'f1').map(key => data.favori[key]).join('\\n');        \r\n    }\r\n\r\n    public toJSON() {\r\n        return {\r\n            id: this.id,\r\n            startDate: this.startDate,\r\n            endDate: this.endDate,\r\n            class: this.class,\r\n            activityType: this.activityType,\r\n            teachers: this.teachers,\r\n            room: this.room,\r\n            title: this.title,\r\n            description: this.description\r\n        }\r\n    }\r\n\r\n}","export default class Mark {\r\n\r\n    public id: string;\r\n    public name: string;\r\n    public startDate: Date;\r\n    public obtentionDate: Date;\r\n    public professors: string[];\r\n\r\n    public value: number;\r\n    public appreciation: string;\r\n\r\n    public absence: boolean;\r\n    public notRated: boolean;\r\n\r\n    constructor(data: any) {\r\n        this.id = data.id;\r\n        this.name = data.libelle;\r\n        this.startDate = new Date(data.date_debut_evt);\r\n        this.obtentionDate = new Date(data.date_obtention);\r\n        this.professors = data.intervenants.split(', ');\r\n        this.value = parseFloat(data.note);\r\n        this.appreciation = data.appreciation;\r\n        this.absence = data.est_absent;\r\n        this.notRated = data.est_non_noter;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            id: this.id,\r\n            name: this.name,\r\n            startDate: this.startDate,\r\n            obtentionDate: this.obtentionDate,\r\n            professors: this.professors,\r\n            value: this.value,\r\n            absence: this.absence,\r\n            notRated: this.notRated\r\n        }\r\n    }\r\n\r\n}","import Mark from \"./mark\";\r\n\r\nexport default class MarkClass {\r\n    \r\n    public id: number;\r\n    public code: string;\r\n    public name: string;\r\n    public professors: string[];\r\n    public average: number;\r\n    public credits: {\r\n        obtained: number,\r\n        total: number\r\n    };\r\n    public validated: boolean;\r\n    public marks: Mark[] = [];\r\n\r\n\r\n    constructor(data: any) {\r\n        this.id = data.id;\r\n        this.code = data.cours_code;\r\n        this.name = data.cours_libelle;\r\n        this.professors = data.intervenants.split(', ');\r\n        this.average = parseFloat(data.inscription_cours.moyenne);\r\n        this.credits = {\r\n            obtained: parseInt(data.inscription_cours.nombre_credits_obtenus),\r\n            total: parseInt(data.inscription_cours.nombre_credits_potentiels)\r\n        }\r\n        this.validated = data.inscription_cours.validated;\r\n\r\n        this.marks = data.epreuves.map((mark: any) => new Mark(mark));\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            id: this.id,\r\n            code: this.code,\r\n            name: this.name,\r\n            professors: this.professors,\r\n            average: this.average,\r\n            credits: this.credits,\r\n            validated: this.validated,\r\n            marks: this.marks.map(mark => mark.toJSON())\r\n        }\r\n    }\r\n\r\n}"],"mappings":"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","names":[]}